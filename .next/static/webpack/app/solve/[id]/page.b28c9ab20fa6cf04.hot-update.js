"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/solve/[id]/page",{

/***/ "(app-pages-browser)/./src/components/CrosswordGrid.tsx":
/*!******************************************!*\
  !*** ./src/components/CrosswordGrid.tsx ***!
  \******************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ CrosswordGrid)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _lib_store__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/store */ \"(app-pages-browser)/./src/lib/store.ts\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\nfunction CrosswordGrid(param) {\n    let { grid, numbering, solveState } = param;\n    _s();\n    const gridRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const [cellSize, setCellSize] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(40);\n    const { updateCell, selectCell, selectClue, clearCell } = (0,_lib_store__WEBPACK_IMPORTED_MODULE_2__.useAppStore)();\n    // Calculate grid size and cell size based on container\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"CrosswordGrid.useEffect\": ()=>{\n            const updateSize = {\n                \"CrosswordGrid.useEffect.updateSize\": ()=>{\n                    if (!gridRef.current) return;\n                    const container = gridRef.current.parentElement;\n                    if (!container) return;\n                    const containerWidth = container.clientWidth;\n                    const containerHeight = container.clientHeight - 100 // Account for controls\n                    ;\n                    const maxCellWidth = Math.floor((containerWidth - 20) / grid.size.cols);\n                    const maxCellHeight = Math.floor((containerHeight - 20) / grid.size.rows);\n                    const newCellSize = Math.min(maxCellWidth, maxCellHeight, 50);\n                    setCellSize(Math.max(newCellSize, 25));\n                }\n            }[\"CrosswordGrid.useEffect.updateSize\"];\n            updateSize();\n            window.addEventListener('resize', updateSize);\n            return ({\n                \"CrosswordGrid.useEffect\": ()=>window.removeEventListener('resize', updateSize)\n            })[\"CrosswordGrid.useEffect\"];\n        }\n    }[\"CrosswordGrid.useEffect\"], [\n        grid.size\n    ]);\n    const handleCellClick = (row, col)=>{\n        const cell = grid.cells[row][col];\n        if (cell.type === 'block') return;\n        selectCell(row, col);\n        // Find intersecting clues\n        const acrossClue = numbering.across.find((clue)=>clue.row === row && col >= clue.col && col < clue.col + clue.length);\n        const downClue = numbering.down.find((clue)=>clue.col === col && row >= clue.row && row < clue.row + clue.length);\n        // Select a clue (prefer the one that starts at this cell, otherwise alternate)\n        if (acrossClue && acrossClue.row === row && acrossClue.col === col) {\n            selectClue('across', acrossClue.number);\n        } else if (downClue && downClue.row === row && downClue.col === col) {\n            selectClue('down', downClue.number);\n        } else if (acrossClue) {\n            selectClue('across', acrossClue.number);\n        } else if (downClue) {\n            selectClue('down', downClue.number);\n        }\n    };\n    const handleKeyPress = (e, row, col)=>{\n        e.preventDefault();\n        if (e.key.match(/[A-Za-z]/)) {\n            updateCell(row, col, e.key.toUpperCase());\n            // Move to next cell in selected direction\n            moveToNextCell(row, col);\n        } else if (e.key === 'Backspace') {\n            clearCell(row, col);\n            // Move to previous cell\n            moveToPreviousCell(row, col);\n        } else if (e.key === 'Delete') {\n            clearCell(row, col);\n        } else if (e.key === 'Tab') {\n            e.preventDefault();\n            // Move to next clue\n            moveToNextClue(e.shiftKey);\n        } else if (e.key.startsWith('Arrow')) {\n            handleArrowKey(e.key, row, col);\n        }\n    };\n    const moveToNextCell = (row, col)=>{\n        if (!(solveState === null || solveState === void 0 ? void 0 : solveState.selectedClue)) return;\n        const { direction, number } = solveState.selectedClue;\n        const clue = numbering[direction].find((c)=>c.number === number);\n        if (!clue) return;\n        const nextRow = direction === 'down' ? row + 1 : row;\n        const nextCol = direction === 'across' ? col + 1 : col;\n        // Check if still within the word\n        if (direction === 'across' && nextCol < clue.col + clue.length) {\n            selectCell(nextRow, nextCol);\n            // Focus the next cell element\n            setTimeout(()=>focusCell(nextRow, nextCol), 0);\n        } else if (direction === 'down' && nextRow < clue.row + clue.length) {\n            selectCell(nextRow, nextCol);\n            // Focus the next cell element\n            setTimeout(()=>focusCell(nextRow, nextCol), 0);\n        }\n    };\n    const moveToPreviousCell = (row, col)=>{\n        if (!(solveState === null || solveState === void 0 ? void 0 : solveState.selectedClue)) return;\n        const { direction, number } = solveState.selectedClue;\n        const clue = numbering[direction].find((c)=>c.number === number);\n        if (!clue) return;\n        const prevRow = direction === 'down' ? row - 1 : row;\n        const prevCol = direction === 'across' ? col - 1 : col;\n        // Check if still within the word\n        if (direction === 'across' && prevCol >= clue.col) {\n            selectCell(prevRow, prevCol);\n            // Focus the previous cell element\n            setTimeout(()=>focusCell(prevRow, prevCol), 0);\n        } else if (direction === 'down' && prevRow >= clue.row) {\n            selectCell(prevRow, prevCol);\n            // Focus the previous cell element\n            setTimeout(()=>focusCell(prevRow, prevCol), 0);\n        }\n    };\n    const focusCell = (row, col)=>{\n        const cellElement = document.querySelector('[data-cell=\"'.concat(row, \"-\").concat(col, '\"]'));\n        if (cellElement) {\n            cellElement.focus();\n        }\n    };\n    const moveToNextClue = function() {\n        let backward = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;\n        if (!(solveState === null || solveState === void 0 ? void 0 : solveState.selectedClue)) return;\n        const { direction, number } = solveState.selectedClue;\n        const clues = numbering[direction];\n        const currentIndex = clues.findIndex((c)=>c.number === number);\n        if (currentIndex === -1) return;\n        const nextIndex = backward ? currentIndex - 1 : currentIndex + 1;\n        if (nextIndex >= 0 && nextIndex < clues.length) {\n            const nextClue = clues[nextIndex];\n            selectClue(direction, nextClue.number);\n            selectCell(nextClue.row, nextClue.col);\n        }\n    };\n    const handleArrowKey = (key, row, col)=>{\n        let newRow = row;\n        let newCol = col;\n        switch(key){\n            case 'ArrowUp':\n                newRow = Math.max(0, row - 1);\n                break;\n            case 'ArrowDown':\n                newRow = Math.min(grid.size.rows - 1, row + 1);\n                break;\n            case 'ArrowLeft':\n                newCol = Math.max(0, col - 1);\n                break;\n            case 'ArrowRight':\n                newCol = Math.min(grid.size.cols - 1, col + 1);\n                break;\n        }\n        // Skip blocked cells\n        while(grid.cells[newRow][newCol].type === 'block'){\n            if (key === 'ArrowUp' && newRow > 0) newRow--;\n            else if (key === 'ArrowDown' && newRow < grid.size.rows - 1) newRow++;\n            else if (key === 'ArrowLeft' && newCol > 0) newCol--;\n            else if (key === 'ArrowRight' && newCol < grid.size.cols - 1) newCol++;\n            else break;\n        }\n        if (grid.cells[newRow][newCol].type === 'cell') {\n            selectCell(newRow, newCol);\n        }\n    };\n    const getCellClasses = (row, col)=>{\n        var _solveState_selectedCell, _solveState_selectedCell1, _solveState_checkResults;\n        const cell = grid.cells[row][col];\n        const cellKey = \"\".concat(row, \",\").concat(col);\n        const classes = [\n            'crossword-cell'\n        ];\n        if (cell.type === 'block') {\n            classes.push('blocked');\n            return classes.join(' ');\n        }\n        // Selection states\n        if ((solveState === null || solveState === void 0 ? void 0 : (_solveState_selectedCell = solveState.selectedCell) === null || _solveState_selectedCell === void 0 ? void 0 : _solveState_selectedCell.row) === row && (solveState === null || solveState === void 0 ? void 0 : (_solveState_selectedCell1 = solveState.selectedCell) === null || _solveState_selectedCell1 === void 0 ? void 0 : _solveState_selectedCell1.col) === col) {\n            classes.push('selected');\n        }\n        // Highlight cells in selected word\n        if (solveState === null || solveState === void 0 ? void 0 : solveState.selectedClue) {\n            const { direction, number } = solveState.selectedClue;\n            const clue = numbering[direction].find((c)=>c.number === number);\n            if (clue) {\n                const inWord = direction === 'across' ? row === clue.row && col >= clue.col && col < clue.col + clue.length : col === clue.col && row >= clue.row && row < clue.row + clue.length;\n                if (inWord) {\n                    classes.push('highlighted');\n                }\n            }\n        }\n        // Check results\n        if ((solveState === null || solveState === void 0 ? void 0 : (_solveState_checkResults = solveState.checkResults) === null || _solveState_checkResults === void 0 ? void 0 : _solveState_checkResults[cellKey]) !== undefined) {\n            classes.push(solveState.checkResults[cellKey] ? 'correct' : 'incorrect');\n        }\n        return classes.join(' ');\n    };\n    const getCellNumber = (row, col)=>{\n        const acrossClue = numbering.across.find((clue)=>clue.row === row && clue.col === col);\n        const downClue = numbering.down.find((clue)=>clue.row === row && clue.col === col);\n        return (acrossClue === null || acrossClue === void 0 ? void 0 : acrossClue.number) || (downClue === null || downClue === void 0 ? void 0 : downClue.number);\n    };\n    const getCellLetter = (row, col)=>{\n        const cellKey = \"\".concat(row, \",\").concat(col);\n        return (solveState === null || solveState === void 0 ? void 0 : solveState.filledCells[cellKey]) || '';\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"flex justify-center p-4\",\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            ref: gridRef,\n            className: \"crossword-grid select-none\",\n            style: {\n                gridTemplateColumns: \"repeat(\".concat(grid.size.cols, \", \").concat(cellSize, \"px)\"),\n                gridTemplateRows: \"repeat(\".concat(grid.size.rows, \", \").concat(cellSize, \"px)\")\n            },\n            children: grid.cells.map((row, rowIndex)=>row.map((cell, colIndex)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: getCellClasses(rowIndex, colIndex),\n                        style: {\n                            width: cellSize,\n                            height: cellSize\n                        },\n                        onClick: ()=>handleCellClick(rowIndex, colIndex),\n                        onKeyDown: (e)=>handleKeyPress(e, rowIndex, colIndex),\n                        tabIndex: cell.type === 'cell' ? 0 : -1,\n                        children: cell.type === 'cell' && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                            children: [\n                                getCellNumber(rowIndex, colIndex) && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                    className: \"cell-number\",\n                                    children: getCellNumber(rowIndex, colIndex)\n                                }, void 0, false, {\n                                    fileName: \"/media/chris/DATA/source/repos/crosswise/src/components/CrosswordGrid.tsx\",\n                                    lineNumber: 266,\n                                    columnNumber: 21\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                    style: {\n                                        fontSize: Math.max(cellSize * 0.5, 12)\n                                    },\n                                    children: getCellLetter(rowIndex, colIndex)\n                                }, void 0, false, {\n                                    fileName: \"/media/chris/DATA/source/repos/crosswise/src/components/CrosswordGrid.tsx\",\n                                    lineNumber: 270,\n                                    columnNumber: 19\n                                }, this)\n                            ]\n                        }, void 0, true)\n                    }, \"\".concat(rowIndex, \"-\").concat(colIndex), false, {\n                        fileName: \"/media/chris/DATA/source/repos/crosswise/src/components/CrosswordGrid.tsx\",\n                        lineNumber: 255,\n                        columnNumber: 13\n                    }, this)))\n        }, void 0, false, {\n            fileName: \"/media/chris/DATA/source/repos/crosswise/src/components/CrosswordGrid.tsx\",\n            lineNumber: 245,\n            columnNumber: 7\n        }, this)\n    }, void 0, false, {\n        fileName: \"/media/chris/DATA/source/repos/crosswise/src/components/CrosswordGrid.tsx\",\n        lineNumber: 244,\n        columnNumber: 5\n    }, this);\n}\n_s(CrosswordGrid, \"dt2K1vBnFBzV02/Tn75s6wUbBbo=\", false, function() {\n    return [\n        _lib_store__WEBPACK_IMPORTED_MODULE_2__.useAppStore\n    ];\n});\n_c = CrosswordGrid;\nvar _c;\n$RefreshReg$(_c, \"CrosswordGrid\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/CrosswordGrid.tsx\n"));

/***/ })

});